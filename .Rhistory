geom_bar(stat="identity", fill="#d45087")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1))
ggplotly(fig_cases_year)
long_deaths_data
last3<- long_deaths_data %>%
filter(Year == c(2021, 2022, 2023))
fig_deaths_month <- ggplot(data = last3,
aes(x = Months, y = `Death Cases`, group=Year, color=Year))+
geom_line()+
theme_minimal()+
theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1))
ggplotly(fig_deaths_month)
last3_sum_df <- long_deaths_data %>%
filter(Year == c(2021, 2022, 2023)) %>%
group_by(Year) %>%
summarise(TotalDeaths = sum(`Death Cases`))
last3_sum_df <- long_deaths_data %>%
filter(Year == c(2021, 2022, 2023)) %>%
group_by(Year) %>%
summarise(TotalDeaths = sum(`Death Cases`))
fig_last3_deaths <- ggplot(data = last3_sum_df, aes(x = Year, y=TotalCases))+
geom_bar(stat="identity", fill="#d45087")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1))
ggplotly(fig_last3_deaths)
last3_sum_df <- long_deaths_data %>%
filter(Year == c(2021, 2022, 2023)) %>%
group_by(Year) %>%
summarise(TotalDeaths = sum(`Death Cases`))
fig_last3_deaths <- ggplot(data = last3_sum_df, aes(x = Year, y=TotalDeaths))+
geom_bar(stat="identity", fill="#d45087")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1))
ggplotly(fig_last3_deaths)
last3_sum_df
last3_sum_df <- long_deaths_data %>%
filter(Year == c(2021, 2022, 2023)) %>%
group_by(Year) %>%
summarise(TotalDeaths = sum(`Death Cases`))
fig_last3_deaths <- ggplot(data = last3_sum_df, aes(x = Year, y=TotalDeaths))+
geom_bar(stat="identity", fill="#d45087")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1))
ggplotly(fig_last3_deaths)
last3_sum_df <- long_deaths_data %>%
filter(Year == c(2021, 2022, 2023)) %>%
group_by(Year) %>%
summarise(TotalDeaths = sum(`Death Cases`)) %>%
filter(Year == "NA")
fig_last3_deaths <- ggplot(data = last3_sum_df, aes(x = Year, y=TotalDeaths))+
geom_bar(stat="identity", fill="#d45087")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1))
ggplotly(fig_last3_deaths)
last3_sum_df <- long_deaths_data %>%
filter(Year == c(2021, 2022, 2023)) %>%
group_by(Year) %>%
summarise(TotalDeaths = sum(`Death Cases`))
fig_last3_deaths <- ggplot(data = last3_sum_df, aes(x = Year, y=TotalDeaths))+
geom_bar(stat="identity", fill="#d45087")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1))
ggplotly(fig_last3_deaths)
data23 %>%
group_by(Date) %>%
summarise(TotalCases = sum(`Confirmed Cases`))
data23_sum_df <- data23 %>%
group_by(Date) %>%
summarise(TotalCases = sum(`Confirmed Cases`),
TotalDeaths = sum(`Confirmed Deaths`))
data23_sum_df <- data23 %>%
group_by(Date) %>%
summarise(TotalCases = sum(`Confirmed Cases`),
TotalDeaths = sum(`Confirmed Deaths`))
fig23 <- plot_ly(data23_sum_df, x = ~Date, y = ~TotalCases, name = 'Confirmed Cases', type = 'scatter', mode = 'lines')
fig1 <- fig1 %>%
add_trace(y = ~TotalDeaths, name = 'Confirmed Deaths',type = 'scatter', mode = 'lines')
fig23
data23 %>%
group_by(Date) %>%
summarise(TotalCases = sum(`Confirmed Cases`),
TotalDeaths = sum(`Confirmed Deaths`))
View(data23_sum_df)
View(data23)
sum(data23$`Confirmed Deaths`)
sum(data23$`Confirmed Deaths`, na.rm = T)
data23_sum_df <- data23 %>%
group_by(Date) %>%
summarise(TotalCases = sum(`Confirmed Cases`, na.rm = T),
TotalDeaths = sum(`Confirmed Deaths`, na.rm = T))
fig23 <- plot_ly(data23_sum_df, x = ~Date, y = ~TotalCases, name = 'Confirmed Cases', type = 'scatter', mode = 'lines')
fig1 <- fig1 %>%
add_trace(y = ~TotalDeaths, name = 'Confirmed Deaths',type = 'scatter', mode = 'lines')
fig23
data23_sum_df <- data23 %>%
group_by(Date) %>%
summarise(TotalCases = sum(`Confirmed Cases`, na.rm = T),
TotalDeaths = sum(`Confirmed Deaths`, na.rm = T))
fig23 <- plot_ly(data23_sum_df, x = ~Date, y = ~TotalCases, name = 'Confirmed Cases', type = 'scatter', mode = 'lines')
fig1 <- fig23 %>%
add_trace(y = ~TotalDeaths, name = 'Confirmed Deaths',type = 'scatter', mode = 'lines')
fig23
data23 %>%
group_by(Date) %>%
summarise(TotalCases = sum(`Confirmed Cases`, na.rm = T),
TotalDeaths = sum(`Confirmed Deaths`, na.rm = T))
View(data23_sum_df)
data23_sum_df <- data23 %>%
group_by(Date) %>%
summarise(TotalCases = sum(`Confirmed Cases`, na.rm = T),
TotalDeaths = sum(`Confirmed Deaths`, na.rm = T))
fig23 <- plot_ly(data23_sum_df, x = ~Date, y = ~TotalCases, name = 'Confirmed Cases', type = 'scatter', mode = 'lines')
fig23 <- fig23 %>%
add_trace(y = ~TotalDeaths, name = 'Confirmed Deaths',type = 'scatter', mode = 'lines')
fig23
data23 %>%
group_by(Date) %>%
summarise(TotalCases = sum(`Confirmed Cases`, na.rm = T),
TotalDeaths = sum(`Confirmed Deaths`, na.rm = T)) %>%
arrange(c("TotalCases", "TotalDeaths"))
data23 %>%
group_by(Date) %>%
summarise(TotalCases = sum(`Confirmed Cases`, na.rm = T),
TotalDeaths = sum(`Confirmed Deaths`, na.rm = T)) %>%
arrange(c(TotalCases, TotalDeaths))
data23 %>%
group_by(Date) %>%
summarise(TotalCases = sum(`Confirmed Cases`, na.rm = T),
TotalDeaths = sum(`Confirmed Deaths`, na.rm = T))
data23_sum_df <- data23 %>%
group_by(Date) %>%
summarise(TotalCases = sum(`Confirmed Cases`, na.rm = T),
TotalDeaths = sum(`Confirmed Deaths`, na.rm = T))
sum(data23_sum_df$TotalDeaths)
data23_sum_df <- data23 %>%
group_by(Date) %>%
summarise(TotalCases = sum(`Confirmed Cases`, na.rm = T),
TotalDeaths = sum(`Confirmed Deaths`, na.rm = T))
fig23 <- plot_ly(data23_sum_df, x = ~Date, y = ~TotalCases, name = 'Confirmed Cases', type = 'scatter', mode = 'lines')
fig23 <- fig23 %>%
add_trace(y = ~TotalDeaths, name = 'Confirmed Deaths',type = 'scatter', mode = 'lines')
fig23
fig23 <- plot_ly(data23, x = ~Date, y = ~TotalCases, name = 'Confirmed Cases', type = 'scatter', mode = 'lines')
fig23 <- fig23 %>%
add_trace(y = ~TotalDeaths, name = 'Confirmed Deaths',type = 'scatter', mode = 'lines')
fig23
fig23 <- plot_ly(data23, x = ~Date, y = ~`Confirmed Cases`, name = 'Confirmed Cases', type = 'scatter', mode = 'lines')
fig23 <- fig23 %>%
add_trace(y = ~`Confirmed Deaths`, name = 'Confirmed Deaths',type = 'scatter', mode = 'lines')
fig23
fig23 <- plot_ly(data23, x = ~Date, y = ~`Confirmed Cases`, name = 'Confirmed Cases', type = 'scatter', mode = 'lines')
fig23 <- fig23 %>%
add_trace(y = ~`Confirmed Deaths`, name = 'Confirmed Deaths',type = 'scatter', mode = 'lines')
fig23
library(shiny)
library(ggplot2)
# Create a data frame from the provided data
df <- readxl::read_excel("DengueCaseReporting[2012-23].xlsx", sheet = 2)
runApp()
runApp()
runApp()
library(flexdashboard)
library(plotly)
library(dplyr)
library(ggplot2)
# Generate fake campaign data
set.seed(123)
dates <- seq(as.Date("2023-01-01"), as.Date("2023-12-31"), by = "day")
campaign_data <- data.frame(
date = sample(dates, 100, replace = TRUE),
reach = sample(100:1000, 100, replace = TRUE),
likes = sample(50:200, 100, replace = TRUE),
comments = sample(10:50, 100, replace = TRUE),
shares = sample(5:30, 100, replace = TRUE)
)
# Aggregate data by date
campaign_summary <- campaign_data %>%
group_by(date) %>%
summarise(
total_reach = sum(reach),
total_likes = sum(likes),
total_comments = sum(comments),
total_shares = sum(shares)
)
# Create line plots for campaign metrics
plot_reach <- plot_ly(campaign_summary, x = ~date, y = ~total_reach, type = "scatter", mode = "lines", name = "Reach")
plot_likes <- plot_ly(campaign_summary, x = ~date, y = ~total_likes, type = "scatter", mode = "lines", name = "Likes")
plot_comments <- plot_ly(campaign_summary, x = ~date, y = ~total_comments, type = "scatter", mode = "lines", name = "Comments")
plot_shares <- plot_ly(campaign_summary, x = ~date, y = ~total_shares, type = "scatter", mode = "lines", name = "Shares")
# Combine line plots into a subplot
subplot(plot_reach, plot_likes, plot_comments, plot_shares, nrows = 4, titleY = TRUE)
# Generate fake post data
post_data <- data.frame(
post_id = paste0("post_", 1:20),
likes = sample(100:500, 20, replace = TRUE),
comments = sample(10:100, 20, replace = TRUE),
shares = sample(5:50, 20, replace = TRUE)
)
# Sort posts by engagement (likes + comments + shares)
top_posts <- post_data %>%
mutate(total_engagement = likes + comments + shares) %>%
arrange(desc(total_engagement)) %>%
head(10)
# Create a horizontal bar plot for top posts
plot_top_posts <- ggplot(top_posts, aes(x = total_engagement, y = reorder(post_id, total_engagement))) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Engagement", y = "Post ID") +
theme_minimal()
# Convert the ggplot object to plotly
plotly_top_posts <- ggplotly(plot_top_posts)
# Display the plotly object
plotly_top_posts
# Generate fake audience data
audience_data <- data.frame(
audience_segment = c("Male", "Female", "Age 18-24", "Age 25-34", "Age 35-44", "Age 45+"),
percentage = c(30, 70, 20, 25, 35, 20)
)
# Create a pie chart for audience engagement
plot_audience <- plot_ly(audience_data, labels = ~audience_segment, values = ~percentage, type = "pie") %>%
layout(showlegend = FALSE)
# Display the plotly object
plot_audience
# Generate fake post performance data
post_performance_data <- data.frame(
post_id = paste0("post_", 1:20),
reach = sample(100:1000, 20, replace = TRUE),
engagement_rate = runif(20, 0.01, 0.1)
)
# Create scatter plots for post performance
plot_reach_performance <- plot_ly(post_performance_data, x = ~reach, y = ~engagement_rate, mode = "markers",
marker = list(color = ~reach, colorscale = "Viridis", size = 10)) %>%
layout(xaxis = list(title = "Reach"), yaxis = list(title = "Engagement Rate"))
# Display the plotly object
plot_reach_performance
# Create line plots for campaign metrics
plot_reach <- plot_ly(campaign_summary, x = ~date, y = ~total_reach, type = "scatter", mode = "lines", name = "Reach")
plot_likes <- plot_ly(campaign_summary, x = ~date, y = ~total_likes, type = "scatter", mode = "lines", name = "Likes")
plot_comments <- plot_ly(campaign_summary, x = ~date, y = ~total_comments, type = "scatter", mode = "lines", name = "Comments")
plot_shares <- plot_ly(campaign_summary, x = ~date, y = ~total_shares, type = "scatter", mode = "lines", name = "Shares")
# Combine line plots into a subplot
subplot(plot_reach, plot_likes, plot_comments, plot_shares, nrows = 4, titleY = TRUE, shareX = FALSE)
# Create line plots for campaign metrics
plot_reach <- plot_ly(campaign_summary, x = ~date, y = ~total_reach, type = "scatter", mode = "lines", name = "Reach")
plot_likes <- plot_ly(campaign_summary, x = ~date, y = ~total_likes, type = "scatter", mode = "lines", name = "Likes")
plot_comments <- plot_ly(campaign_summary, x = ~date, y = ~total_comments, type = "scatter", mode = "lines", name = "Comments")
plot_shares <- plot_ly(campaign_summary, x = ~date, y = ~total_shares, type = "scatter", mode = "lines", name = "Shares")
# Combine line plots into a subplot
subplot(plot_reach, plot_likes, plot_comments, plot_shares, nrows = 4, titleY = TRUE, shareX = TRUE)
library(flexdashboard)
library(tidyverse)
library(viridis)
# Maps and Plots
library(plotly)
library(leaflet)
library(leafpop)
library(RColorBrewer)
# Dates
library(lubridate)
## For displaying tables
library(DT)
library(readxl)
theme_set(theme_classic())
library(flexdashboard)
library(tidyverse)
library(viridis)
# Maps and Plots
library(plotly)
library(leaflet)
library(leafpop)
library(RColorBrewer)
# Dates
library(lubridate)
## For displaying tables
library(DT)
library(readxl)
theme_set(theme_classic())
confirmed_color <- "lightsteelblue"
active_color <- "orange"
new_deaths_color <- "limegreen"
death_color <- "red"
# read dengue cases data from 2012 to 2023
all_cases_data <- read_excel("DengueCaseReporting[2012-23].xlsx", sheet = 1)
# transform data
long_cases_data <- all_cases_data %>%
pivot_longer(cols = 2:13, names_to = "Year", values_to = "Cases") %>%
mutate(Months = factor(Months, levels = month.name))
long_cases_data$Year <- as.factor(long_cases_data$Year )
# read dengue deaths cases data from 2015 to 2023
all_deaths_data <- read_excel("DengueCaseReporting[2012-23].xlsx", sheet = 2)
# transform data
long_deaths_data <- all_deaths_data %>%
pivot_longer(cols = 2:10, names_to = "Year", values_to = "Death Cases") %>%
mutate(Months = factor(Months, levels = month.name))
long_deaths_data$Year <- as.factor(long_deaths_data$Year)
# read multiple sheets
data23 <- bind_rows("DengueCases2023.xlsx" %>%
excel_sheets() %>%
purrr::set_names()%>%
map(read_excel, path = "DengueCases2023.xlsx"))
data23$Date <- as.Date(data23$Date)
fig23 <- plot_ly(data23, x = ~Date, y = ~`Confirmed Cases`, name = 'Confirmed Cases', type = 'scatter', mode = 'lines')
fig23 <- fig23 %>%
add_trace(y = ~`Confirmed Deaths`, name = 'Confirmed Deaths',type = 'scatter', mode = 'lines')
fig23
case_sum_df <- long_cases_data %>%
group_by(Year) %>%
summarise(TotalCases = sum(Cases))
fig_cases <- ggplot(data = case_sum_df, aes(x = Year, y = TotalCases))+
geom_bar(stat="identity", fill="#003f5c")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1))
ggplotly(fig_cases)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
# The data provided by the user
data <- data.frame(
Months = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"),
`2012` = c(0, 0, 0, 0, 0, 16, 108, 138, 262, 90, 57, 0),
`2013` = c(0, 0, 0, 0, 4, 44, 220, 353, 495, 363, 212, 58),
`2014` = c(15, 7, 2, 0, 8, 9, 82, 80, 76, 63, 22, 11),
`2015` = c(0, 0, 2, 6, 10, 28, 171, 765, 965, 869, 271, 75),
`2016` = c(13, 3, 17, 38, 70, 254, 926, 1451, 1544, 1077, 522, 145),
`2017` = c(92, 58, 36, 73, 134, 265, 286, 346, 430, 512, 409, 126),
`2018` = c(26, 7, 19, 29, 52, 295, 946, 1796, 3087, 2406, 1192, 293),
`2019` = c(38, 18, 17, 58, 193, 1884, 16253, 52636, 16856, 8143, 4011, 1247),
`2020` = c(199, 45, 27, 25, 10, 20, 23, 68, 47, 164, 546, 231),
`2021` = c(32, 9, 13, 3, 43, 272, 2286, 7698, 7841, 5458, 3567, 1207),
`2022` = c(126, 20, 20, 23, 163, 737, 1571, 3521, 9911, 21932, 19334, 5024),
`2023` = c(566, 166, 111, 143, 1036, 5956, 1893, 0, 0, 0, 0, 0)
)
# Convert the data from wide to long format for plotting purposes
data_long <- tidyr::gather(data, Year, Cases, -Months)
data_long$Year <- as.numeric(data_long$Year)
# The data provided by the user
data <- data.frame(
Months = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"),
`2012` = c(0, 0, 0, 0, 0, 16, 108, 138, 262, 90, 57, 0),
`2013` = c(0, 0, 0, 0, 4, 44, 220, 353, 495, 363, 212, 58),
`2014` = c(15, 7, 2, 0, 8, 9, 82, 80, 76, 63, 22, 11),
`2015` = c(0, 0, 2, 6, 10, 28, 171, 765, 965, 869, 271, 75),
`2016` = c(13, 3, 17, 38, 70, 254, 926, 1451, 1544, 1077, 522, 145),
`2017` = c(92, 58, 36, 73, 134, 265, 286, 346, 430, 512, 409, 126),
`2018` = c(26, 7, 19, 29, 52, 295, 946, 1796, 3087, 2406, 1192, 293),
`2019` = c(38, 18, 17, 58, 193, 1884, 16253, 52636, 16856, 8143, 4011, 1247),
`2020` = c(199, 45, 27, 25, 10, 20, 23, 68, 47, 164, 546, 231),
`2021` = c(32, 9, 13, 3, 43, 272, 2286, 7698, 7841, 5458, 3567, 1207),
`2022` = c(126, 20, 20, 23, 163, 737, 1571, 3521, 9911, 21932, 19334, 5024),
`2023` = c(566, 166, 111, 143, 1036, 5956, 1893, 0, 0, 0, 0, 0)
)
# Convert the data from wide to long format for plotting purposes
data_long <- tidyr::gather(data, Year, Cases, -Months)
data_long$Year <- as.numeric(data_long$Year)
View(data_long)
plot_ly(data_long, x = ~Months, y = ~Cases, color = ~factor(Year),
type = "bar", split = ~Year, width = 1000) %>%
layout(title = "Dengue Cases by Month and Year",
xaxis = list(title = "Month"),
yaxis = list(title = "Number of Cases"),
showlegend = FALSE)
plot_ly(data_long, x = ~Months, y = ~Cases, color = ~factor(Year),
type = "bar", split = ~Year, width = 1000)
library(plotly)
# Convert the data from wide to long format for plotting purposes
data_long <- tidyr::gather(data, Year, Cases, -Months)
data_long$Year <- as.numeric(data_long$Year)
plot_ly(data_long, x = ~Months, y = ~Cases, color = ~factor(Year),
type = "bar", split = ~Year, width = 1000)
layout(title = "Dengue Cases by Month and Year",
xaxis = list(title = "Month"),
yaxis = list(title = "Number of Cases"),
showlegend = FALSE)
library(tidyverse)
library(sjPlot)
library(viridis)
# Maps and Plots
library(plotly)
library(leaflet)
library(leafpop)
library(RColorBrewer)
# Dates
library(lubridate)
## For displaying tables
library(DT)
library(readxl)
library(flexdashboard)
library(tidyverse)
library(sjPlot)
library(viridis)
# Maps and Plots
library(plotly)
library(leaflet)
library(leafpop)
library(RColorBrewer)
# Dates
library(lubridate)
## For displaying tables
library(DT)
library(readxl)
theme_set(theme_classic())
confirmed_color <- "lightsteelblue"
active_color <- "orange"
new_deaths_color <- "limegreen"
death_color <- "red"
# read dengue cases data from 2012 to 2023
all_cases_data <- read_excel("DengueCaseReporting[2012-23].xlsx", sheet = 1)
# transform data
long_cases_data <- all_cases_data %>%
pivot_longer(cols = 2:13, names_to = "Year", values_to = "Cases") %>%
mutate(Months = factor(Months, levels = month.name))
long_cases_data$Year <- as.factor(long_cases_data$Year )
```{r, deaths-all, include=FALSE}
# read dengue deaths cases data from 2015 to 2023
all_deaths_data <- read_excel("DengueCaseReporting[2012-23].xlsx", sheet = 2)
# transform data
long_deaths_data <- all_deaths_data %>%
pivot_longer(cols = 2:10, names_to = "Year", values_to = "Death Cases") %>%
mutate(Months = factor(Months, levels = month.name))
long_deaths_data$Year <- as.factor(long_deaths_data$Year)
# read multiple sheets
data23 <- bind_rows("DengueCases2023.xlsx" %>%
excel_sheets() %>%
purrr::set_names()%>%
map(read_excel, path = "DengueCases2023.xlsx"))
data23$Date <- as.Date(data23$Date)
confirmed <- format(sum(data23$`Confirmed Cases`, na.rm = T), big.mark = ",")
valueBox(value = confirmed,
caption = "Total Confirmed Cases in 2023",
color = confirmed_color)
webshot::webshot("index.html", "dengue.png")
webshot::install_phantomjs()
webshot::webshot("index.html", "dengue.png")
# read dengue cases data from 2012 to 2023
all_cases_data <- read_excel("DengueCaseReporting[2012-23].xlsx", sheet = 1)
# read dengue cases data from 2012 to 2023
all_cases_data <- read_excel("DengueCaseReporting[2012-23].xlsx", sheet = 1)
# transform data
long_cases_data <- all_cases_data %>%
pivot_longer(cols = 2:13, names_to = "Year", values_to = "Cases") %>%
mutate(Months = factor(Months, levels = month.name))
long_cases_data$Year <- as.factor(long_cases_data$Year )
long_cases_data
plot_frq(long_cases_data$Months, long_cases_data$Cases)
library(flexdashboard)
library(tidyverse)
library(sjPlot)
library(viridis)
# Maps and Plots
library(plotly)
library(leaflet)
library(leafpop)
library(RColorBrewer)
# Dates
library(lubridate)
## For displaying tables
library(DT)
library(readxl)
theme_set(theme_classic())
# read multiple sheets
data23 <- bind_rows("DengueCases2023.xlsx" %>%
excel_sheets() %>%
purrr::set_names()%>%
map(read_excel, path = "DengueCases2023.xlsx"))
# load packages
library(tidyverse)
library(readxl)
library(hrbrthemes)
library(ggthemes)
library(ggpubr)
library(RColorBrewer)
library(viridis)
library(gtsummary)
library(gt)
library(rio)
library(skimr)
library(naniar)
library(imputeTS)
library(heatmaply)
library(easystats)
# read all sheets
data <- import_list(here::here("data/DengueCases2023.xlsx"), rbind = TRUE)
data23 <- bind_rows("data/DengueCases2023.xlsx" %>%
excel_sheets() %>%
purrr::set_names()%>%
map(read_excel, path = "DengueCases2023.xlsx"))
data23 <- bind_rows("data/DengueCases2023.xlsx" %>%
excel_sheets() %>%
purrr::set_names()%>%
map(read_excel, path = "data/DengueCases2023.xlsx"))
library(flexdashboard)
library(tidyverse)
library(sjPlot)
library(viridis)
# Maps and Plots
library(plotly)
library(leaflet)
library(leafpop)
library(RColorBrewer)
# Dates
library(lubridate)
## For displaying tables
library(DT)
library(readxl)
theme_set(theme_classic())
confirmed_color <- "lightsteelblue"
active_color <- "orange"
new_deaths_color <- "limegreen"
death_color <- "red"
# read dengue cases data from 2012 to 2023
all_cases_data <- read_excel("DengueCaseReporting[2012-23].xlsx", sheet = 1)
